{"version":3,"file":"main.js","mappings":"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","sources":["ru.js","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/loading/loading.component.ts","./src/app/components/loading/loading.component.html","./src/app/interceptors/base-url.interceptor.ts","./src/app/modules/svg-icon/generated-svg/svg-icons.ts","./src/app/modules/svg-icon/svg-icon.component.ts","./src/app/modules/svg-icon/svg-icon.interface.ts","./src/app/modules/svg-icon/svg-icon.module.ts","./src/app/modules/svg-icon/svg-icon.service.ts","./src/app/modules/svg-icon/svg-icon.token.ts","./src/app/services/currencies.interface.ts","./src/app/services/currencies.service.ts","./src/environments/environment.development.ts","./src/main.ts","ignored|/Users/akpop10/Desktop/projects/currency/src|@angular/localize/init"],"sourcesContent":["\"use strict\";(function(global,_global$ng,_global$ng2,_global$ng2$common,_global$ng$common,_global$ng$common$loc){(_global$ng=global.ng)!==null&&_global$ng!==void 0?_global$ng:global.ng={};(_global$ng2$common=(_global$ng2=global.ng).common)!==null&&_global$ng2$common!==void 0?_global$ng2$common:_global$ng2.common={};(_global$ng$common$loc=(_global$ng$common=global.ng.common).locales)!==null&&_global$ng$common$loc!==void 0?_global$ng$common$loc:_global$ng$common.locales={};const u=undefined;function plural(val){const n=val,i=Math.floor(Math.abs(val)),v=val.toString().replace(/^[^.]*\\.?/,\"\").length;if(v===0&&i%10===1&&!(i%100===11))return 1;if(v===0&&i%10===Math.floor(i%10)&&i%10>=2&&i%10<=4&&!(i%100>=12&&i%100<=14))return 3;if(v===0&&i%10===0||v===0&&i%10===Math.floor(i%10)&&i%10>=5&&i%10<=9||v===0&&i%100===Math.floor(i%100)&&i%100>=11&&i%100<=14)return 4;return 5}global.ng.common.locales[\"ru\"]=[\"ru\",[[\"AM\",\"PM\"],u,u],u,[[\"\\u0412\",\"\\u041F\",\"\\u0412\",\"\\u0421\",\"\\u0427\",\"\\u041F\",\"\\u0421\"],[\"\\u0432\\u0441\",\"\\u043F\\u043D\",\"\\u0432\\u0442\",\"\\u0441\\u0440\",\"\\u0447\\u0442\",\"\\u043F\\u0442\",\"\\u0441\\u0431\"],[\"\\u0432\\u043E\\u0441\\u043A\\u0440\\u0435\\u0441\\u0435\\u043D\\u044C\\u0435\",\"\\u043F\\u043E\\u043D\\u0435\\u0434\\u0435\\u043B\\u044C\\u043D\\u0438\\u043A\",\"\\u0432\\u0442\\u043E\\u0440\\u043D\\u0438\\u043A\",\"\\u0441\\u0440\\u0435\\u0434\\u0430\",\"\\u0447\\u0435\\u0442\\u0432\\u0435\\u0440\\u0433\",\"\\u043F\\u044F\\u0442\\u043D\\u0438\\u0446\\u0430\",\"\\u0441\\u0443\\u0431\\u0431\\u043E\\u0442\\u0430\"],[\"\\u0432\\u0441\",\"\\u043F\\u043D\",\"\\u0432\\u0442\",\"\\u0441\\u0440\",\"\\u0447\\u0442\",\"\\u043F\\u0442\",\"\\u0441\\u0431\"]],u,[[\"\\u042F\",\"\\u0424\",\"\\u041C\",\"\\u0410\",\"\\u041C\",\"\\u0418\",\"\\u0418\",\"\\u0410\",\"\\u0421\",\"\\u041E\",\"\\u041D\",\"\\u0414\"],[\"\\u044F\\u043D\\u0432.\",\"\\u0444\\u0435\\u0432\\u0440.\",\"\\u043C\\u0430\\u0440.\",\"\\u0430\\u043F\\u0440.\",\"\\u043C\\u0430\\u044F\",\"\\u0438\\u044E\\u043D.\",\"\\u0438\\u044E\\u043B.\",\"\\u0430\\u0432\\u0433.\",\"\\u0441\\u0435\\u043D\\u0442.\",\"\\u043E\\u043A\\u0442.\",\"\\u043D\\u043E\\u044F\\u0431.\",\"\\u0434\\u0435\\u043A.\"],[\"\\u044F\\u043D\\u0432\\u0430\\u0440\\u044F\",\"\\u0444\\u0435\\u0432\\u0440\\u0430\\u043B\\u044F\",\"\\u043C\\u0430\\u0440\\u0442\\u0430\",\"\\u0430\\u043F\\u0440\\u0435\\u043B\\u044F\",\"\\u043C\\u0430\\u044F\",\"\\u0438\\u044E\\u043D\\u044F\",\"\\u0438\\u044E\\u043B\\u044F\",\"\\u0430\\u0432\\u0433\\u0443\\u0441\\u0442\\u0430\",\"\\u0441\\u0435\\u043D\\u0442\\u044F\\u0431\\u0440\\u044F\",\"\\u043E\\u043A\\u0442\\u044F\\u0431\\u0440\\u044F\",\"\\u043D\\u043E\\u044F\\u0431\\u0440\\u044F\",\"\\u0434\\u0435\\u043A\\u0430\\u0431\\u0440\\u044F\"]],[[\"\\u042F\",\"\\u0424\",\"\\u041C\",\"\\u0410\",\"\\u041C\",\"\\u0418\",\"\\u0418\",\"\\u0410\",\"\\u0421\",\"\\u041E\",\"\\u041D\",\"\\u0414\"],[\"\\u044F\\u043D\\u0432.\",\"\\u0444\\u0435\\u0432\\u0440.\",\"\\u043C\\u0430\\u0440\\u0442\",\"\\u0430\\u043F\\u0440.\",\"\\u043C\\u0430\\u0439\",\"\\u0438\\u044E\\u043D\\u044C\",\"\\u0438\\u044E\\u043B\\u044C\",\"\\u0430\\u0432\\u0433.\",\"\\u0441\\u0435\\u043D\\u0442.\",\"\\u043E\\u043A\\u0442.\",\"\\u043D\\u043E\\u044F\\u0431.\",\"\\u0434\\u0435\\u043A.\"],[\"\\u044F\\u043D\\u0432\\u0430\\u0440\\u044C\",\"\\u0444\\u0435\\u0432\\u0440\\u0430\\u043B\\u044C\",\"\\u043C\\u0430\\u0440\\u0442\",\"\\u0430\\u043F\\u0440\\u0435\\u043B\\u044C\",\"\\u043C\\u0430\\u0439\",\"\\u0438\\u044E\\u043D\\u044C\",\"\\u0438\\u044E\\u043B\\u044C\",\"\\u0430\\u0432\\u0433\\u0443\\u0441\\u0442\",\"\\u0441\\u0435\\u043D\\u0442\\u044F\\u0431\\u0440\\u044C\",\"\\u043E\\u043A\\u0442\\u044F\\u0431\\u0440\\u044C\",\"\\u043D\\u043E\\u044F\\u0431\\u0440\\u044C\",\"\\u0434\\u0435\\u043A\\u0430\\u0431\\u0440\\u044C\"]],[[\"\\u0434\\u043E \\u043D.\\u044D.\",\"\\u043D.\\u044D.\"],[\"\\u0434\\u043E \\u043D. \\u044D.\",\"\\u043D. \\u044D.\"],[\"\\u0434\\u043E \\u0420\\u043E\\u0436\\u0434\\u0435\\u0441\\u0442\\u0432\\u0430 \\u0425\\u0440\\u0438\\u0441\\u0442\\u043E\\u0432\\u0430\",\"\\u043E\\u0442 \\u0420\\u043E\\u0436\\u0434\\u0435\\u0441\\u0442\\u0432\\u0430 \\u0425\\u0440\\u0438\\u0441\\u0442\\u043E\\u0432\\u0430\"]],1,[6,0],[\"dd.MM.y\",\"d MMM y '\\u0433'.\",\"d MMMM y '\\u0433'.\",\"EEEE, d MMMM y '\\u0433'.\"],[\"HH:mm\",\"HH:mm:ss\",\"HH:mm:ss z\",\"HH:mm:ss zzzz\"],[\"{1}, {0}\",u,u,u],[\",\",\"\\xA0\",\";\",\"%\",\"+\",\"-\",\"E\",\"\\xD7\",\"\\u2030\",\"\\u221E\",\"\\u043D\\u0435\\xA0\\u0447\\u0438\\u0441\\u043B\\u043E\",\":\"],[\"#,##0.###\",\"#,##0\\xA0%\",\"#,##0.00\\xA0\\xA4\",\"#E0\"],\"RUB\",\"\\u20BD\",\"\\u0440\\u043E\\u0441\\u0441\\u0438\\u0439\\u0441\\u043A\\u0438\\u0439 \\u0440\\u0443\\u0431\\u043B\\u044C\",{\"BYN\":[u,\"\\u0440.\"],\"GEL\":[u,\"\\u10DA\"],\"PHP\":[u,\"\\u20B1\"],\"RON\":[u,\"L\"],\"RUB\":[\"\\u20BD\"],\"RUR\":[\"\\u0440.\"],\"THB\":[\"\\u0E3F\"],\"TMT\":[\"\\u0422\\u041C\\u0422\"],\"TWD\":[\"NT$\"],\"UAH\":[\"\\u20B4\"],\"XXX\":[\"XXXX\"]},\"ltr\",plural,[[[\"\\u043F\\u043E\\u043B\\u043D.\",\"\\u043F\\u043E\\u043B\\u0434.\",\"\\u0443\\u0442\\u0440\\u0430\",\"\\u0434\\u043D\\u044F\",\"\\u0432\\u0435\\u0447.\",\"\\u043D\\u043E\\u0447\\u0438\"],[\"\\u043F\\u043E\\u043B\\u043D.\",\"\\u043F\\u043E\\u043B\\u0434.\",\"\\u0443\\u0442\\u0440\\u0430\",\"\\u0434\\u043D\\u044F\",\"\\u0432\\u0435\\u0447\\u0435\\u0440\\u0430\",\"\\u043D\\u043E\\u0447\\u0438\"],[\"\\u043F\\u043E\\u043B\\u043D\\u043E\\u0447\\u044C\",\"\\u043F\\u043E\\u043B\\u0434\\u0435\\u043D\\u044C\",\"\\u0443\\u0442\\u0440\\u0430\",\"\\u0434\\u043D\\u044F\",\"\\u0432\\u0435\\u0447\\u0435\\u0440\\u0430\",\"\\u043D\\u043E\\u0447\\u0438\"]],[[\"\\u043F\\u043E\\u043B\\u043D.\",\"\\u043F\\u043E\\u043B\\u0434.\",\"\\u0443\\u0442\\u0440\\u043E\",\"\\u0434\\u0435\\u043D\\u044C\",\"\\u0432\\u0435\\u0447.\",\"\\u043D\\u043E\\u0447\\u044C\"],u,[\"\\u043F\\u043E\\u043B\\u043D\\u043E\\u0447\\u044C\",\"\\u043F\\u043E\\u043B\\u0434\\u0435\\u043D\\u044C\",\"\\u0443\\u0442\\u0440\\u043E\",\"\\u0434\\u0435\\u043D\\u044C\",\"\\u0432\\u0435\\u0447\\u0435\\u0440\",\"\\u043D\\u043E\\u0447\\u044C\"]],[\"00:00\",\"12:00\",[\"04:00\",\"12:00\"],[\"12:00\",\"18:00\"],[\"18:00\",\"22:00\"],[\"22:00\",\"04:00\"]]]]})(globalThis);","import { AfterViewInit, ChangeDetectionStrategy, Component, DestroyRef, OnInit, inject } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { FormControl, FormGroupDirective, NgForm, NonNullableFormBuilder, Validators } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { combineLatest, filter, take } from 'rxjs';\n\nimport { Pairs } from './services/currencies.interface';\nimport { CurrenciesService } from './services/currencies.service';\n\ninterface Data {\n  amountFrom: FormControl<string>;\n  currencyFrom: FormControl<Pairs | ''>;\n  amountTo: FormControl<string>;\n  currencyTo: FormControl<Pairs | ''>;\n}\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit, AfterViewInit {\n  isLoaded$ = this.currenciesService.isLoaded$;\n  matcher = new MyErrorStateMatcher();\n\n  currencies = [\n    { name: '₽', code: Pairs.RUB },\n    { name: '$', code: Pairs.USD },\n    { name: '€', code: Pairs.EUR },\n    { name: '£', code: Pairs.GBP },\n  ];\n\n  form = this.formBuilder.group<Data>({\n    amountFrom: this.formBuilder.control('', [Validators.required]),\n    currencyFrom: this.formBuilder.control(Pairs.USD, [Validators.required]),\n    amountTo: this.formBuilder.control('', [Validators.required]),\n    currencyTo: this.formBuilder.control(Pairs.RUB, [Validators.required]),\n  });\n\n  readonly #destroyRef = inject(DestroyRef);\n\n  constructor(\n    private formBuilder: NonNullableFormBuilder,\n    private currenciesService: CurrenciesService,\n  ) {}\n\n  ngOnInit(): void {\n    this.loadCurrencyPairsRates();\n  }\n\n  ngAfterViewInit(): void {\n    this.formListener();\n  }\n\n  private formListener(): void {\n    combineLatest([this.currenciesService.isLoaded$, this.form.get('amountFrom')!.valueChanges])\n      .pipe(filter(([isLoaded]) => !isLoaded))\n      .subscribe(([, amountFrom]) => {\n        const amountTo = this.currenciesService.getAmount(\n          amountFrom,\n          this.form.value.currencyFrom as Pairs,\n          this.form.value.currencyTo as Pairs,\n        );\n        this.form.get('amountTo')?.setValue(amountTo, { emitEvent: false });\n      });\n\n    combineLatest([this.currenciesService.isLoaded$, this.form.get('amountTo')!.valueChanges])\n      .pipe(filter(([isLoaded]) => !isLoaded))\n      .subscribe(([, amountTo]) => {\n        const amountFrom = this.currenciesService.getAmount(\n          amountTo,\n          this.form.value.currencyTo as Pairs,\n          this.form.value.currencyFrom as Pairs,\n        );\n        this.form.get('amountFrom')?.setValue(amountFrom, { emitEvent: false });\n      });\n  }\n\n  private loadCurrencyPairsRates(): void {\n    this.currenciesService\n      .loadCurrencyPairsRates(this.currencies.map((currency) => currency.code))\n      .pipe(take(1), takeUntilDestroyed(this.#destroyRef))\n      .subscribe((data) => {\n        this.currenciesService.setCurrencyPairsRates(data);\n      });\n  }\n}\n","<app-loading [isVisible]=\"(isLoaded$ | ngrxPush) ?? false\">\n  <ng-container i18n=\"@@loading.text\">Loading currency rates</ng-container>\n</app-loading>\n<form class=\"form\" [formGroup]=\"form\">\n  <div class=\"form-group\">\n    <mat-form-field appearance=\"outline\" class=\"form-group__field\" floatLabel=\"always\">\n      <mat-label i18n=\"@@form.form-field.label-amount-from\">Amount</mat-label>\n      <input formControlName=\"amountFrom\" mask=\"separator\" matInput type=\"text\" [leadZero]=\"true\" />\n      @if (form.get('amountFrom')?.hasError('required')) {\n        <mat-error i18n=\"@@form.form-field.error-required\">Required field</mat-error>\n      }\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\" class=\"form-group__field form-group__field_short\" floatLabel=\"always\">\n      <mat-label i18n=\"@@form.form-field.label-currency-from\">Currency</mat-label>\n      <mat-select formControlName=\"currencyFrom\" [errorStateMatcher]=\"matcher\">\n        @for (currency of currencies; track currency.code) {\n          <mat-option [value]=\"currency.code\">{{ currency.name }}</mat-option>\n        }\n      </mat-select>\n      @if (form.get('currencyFrom')?.hasError('required')) {\n        <mat-error i18n=\"@@form.form-field.error\">Must make a selection</mat-error>\n      }\n    </mat-form-field>\n  </div>\n  <button class=\"form__swap-btn\" type=\"button\"><svg-icon name=\"swap\"></svg-icon></button>\n  <div class=\"form-group\">\n    <mat-form-field appearance=\"outline\" class=\"form-group__field\" floatLabel=\"always\">\n      <mat-label i18n=\"@@form.form-field.label-amoun-to\">Amount</mat-label>\n      <input formControlName=\"amountTo\" mask=\"separator\" matInput type=\"text\" [leadZero]=\"true\" />\n      <mat-error i18n=\"@@form.form-field.error-required\">Required field</mat-error>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\" class=\"form-group__field form-group__field_short\" floatLabel=\"always\">\n      <mat-label i18n=\"@@form.form-field.label-currency-to\">Currency</mat-label>\n      <mat-select formControlName=\"currencyTo\" [errorStateMatcher]=\"matcher\">\n        @for (currency of currencies; track currency.code) {\n          <mat-option [value]=\"currency.code\">{{ currency.name }}</mat-option>\n        }\n      </mat-select>\n      @if (form.get('currencyTo')?.hasError('required')) {\n        <mat-error i18n=\"@@form.form-field.error\">Must make a selection</mat-error>\n      }\n    </mat-form-field>\n  </div>\n</form>\n\n<a class=\"github-link\" href=\"https://github.com/ASDAlexey/ASDAlexey.github.io\" target=\"_blank\">\n  <img alt=\"github\" class=\"github-link__img\" height=\"24\" property=\"high\" src=\"/assets/images/github.svg\" width=\"24\" />\n  <span class=\"github-link__text\" i18n=\"@@github.link\">See code on github</span>\n</a>\n","import { ClipboardModule } from '@angular/cdk/clipboard';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormField, MatOption, MatSelect } from '@angular/material/select';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { RouterOutlet } from '@angular/router';\nimport { LetDirective, PushPipe } from '@ngrx/component';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { NgxMaskDirective, provideNgxMask } from 'ngx-mask';\nimport { DropdownModule } from 'primeng/dropdown';\n\n\n\nimport { environment } from '../environments/environment';\nimport { AppComponent } from './app.component';\nimport { LoadingComponent } from './components/loading/loading.component';\nimport { BaseUrlInterceptor } from './interceptors/base-url.interceptor';\nimport { default as icons } from './modules/svg-icon/generated-svg/svg-icons';\nimport { SvgIconModule } from './modules/svg-icon/svg-icon.module';\nimport { SVG_REGISTRY_TOKEN } from './modules/svg-icon/svg-icon.token';\n\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    RouterOutlet,\n    SvgIconModule,\n    MatButtonModule,\n    ClipboardModule,\n    environment.production ? [] : StoreDevtoolsModule.instrument({ maxAge: 300, connectInZone: true }),\n    LetDirective,\n    DropdownModule,\n    ReactiveFormsModule,\n    MatSelect,\n    MatOption,\n    MatFormField,\n    MatFormFieldModule,\n    FormsModule,\n    MatInputModule,\n    NgxMaskDirective,\n    LoadingComponent,\n    PushPipe,\n    MatIcon,\n  ],\n  providers: [\n    { provide: SVG_REGISTRY_TOKEN, useValue: icons },\n    { provide: HTTP_INTERCEPTORS, useClass: BaseUrlInterceptor, multi: true },\n    provideNgxMask(),\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Attribute, ChangeDetectionStrategy, Component, HostBinding, Input, OnChanges } from '@angular/core';\n\nimport { SimpleChangesTyped } from '../../types/simple-changes-typed.type';\n\n/**\n * Представляет компонент загрузки, который отображает предварительный загрузчик.\n */\n@Component({\n  selector: 'app-loading',\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n})\nexport class LoadingComponent implements OnChanges {\n  /**\n   * Указывает, видим ли в прелоадер или нет\n   *\n   * @type {boolean}\n   */\n  @Input()\n  @HostBinding('class.visible')\n  isVisible = false;\n\n  /**\n   * Проверяет являться ли указанный объект анимацией.\n   *\n   * @param {Object} object - Объект для проверки.\n   * @returns {boolean} - Возвращает истину, если объект является анимацией, иначе ложь.\n   */\n  @HostBinding('class.animation')\n  isAnimation = this.type !== 'image';\n\n  /**\n   * Получает значение ссылки от соответствующего метода.\n   * @returns {string} Значение ссылки, полученное от метода.\n   */\n  link = this.getLink();\n\n  /**\n   * Создает новый экземпляр конструктора.\n   *\n   * @param {string} type - Тип объекта. Это может быть 'animation' или 'image'.\n   * @return {void}\n   */\n  constructor(@Attribute('type') public type: 'animation' | 'image' = 'animation') {}\n\n  /**\n   * Реагирует на изменения во входных свойствах компонента.\n   *\n   * @param {SimpleChangesTyped<this>} changes - Изменения во входных свойствах компонента.\n   * @return {void} - Возвращает ничего.\n   */\n  ngOnChanges(changes: SimpleChangesTyped<this>): void {\n    if (changes.isVisible?.currentValue && this.type === 'image') {\n      this.link = this.getLink();\n    }\n  }\n\n  /**\n   * Возвращает ссылку на изображение предзагрузчика с параметром cache buster.\n   *\n   * @returns {string} Ссылка на изображение предзагрузки с параметром -ant, преодолевающим кеширование.\n   */\n  private getLink(): string {\n    return `/assets/images/preloader.svg?cacheBuster=${new Date().getTime()}`;\n  }\n}\n","@if (type === 'image') {\n  <div class=\"loader__img-block\">\n    <img alt=\"loader-image\" class=\"loader__img\" [src]=\"link\" />\n  </div>\n} @else {\n  <span class=\"loader__text\"><ng-content></ng-content></span>\n  <div class=\"loader__animation\"></div>\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '../../environments/environment';\n\n/**\n * Перехватывает HTTP-запросы и добавляет базовый URL-API, если URL-запроса не начинается с '/'\n * @class BaseUrlInterceptor\n * @implements {HttpInterceptor}\n * @Injectable({ providedIn: 'root' })\n */\n@Injectable({ providedIn: 'root' })\nexport class BaseUrlInterceptor implements HttpInterceptor {\n  /**\n   * Перехватывает HTTP-запросы и добавляет базовый URL API, если URL-запроса не начинается с '/'\n   * @param {HttpRequest<unknown>} req - HTTP-запрос для перехвата\n   * @param {HttpHandler} next - Следующий обработчик HTTP в цепочке перехватов\n   * @returns {Observable<HttpEvent<unknown>>} - Наблюдаемый объект, который отдаёт HTTP-ответ\n   */\n  intercept(req: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    req = req.clone({ url: environment.API_URL + req.url });\n\n    return next.handle(req);\n  }\n}\n","/* 🤖 this file was generated by svg-to-ts */\nexport default {\n  swap: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\"><path d=\"M11.8.603a.5.5 0 00-.8.4v2H1a1 1 0 100 2h10v2a.5.5 0 00.8.4l3.997-3a.5.5 0 000-.8l-3.997-3zM5 13.003v2a.5.5 0 01-.8.4l-3.997-3a.5.5 0 010-.8l3.997-3a.5.5 0 01.8.4v2h10a1 1 0 010 2H5z\"/></svg>',\n} as { [key in IconType]: string };\nexport type IconType = 'swap';\n","import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Input, OnChanges, Renderer2, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport { SimpleChangesTyped } from '../../types/simple-changes-typed.type';\nimport type { IconType } from './generated-svg/svg-icons';\nimport { SvgIconService } from './svg-icon.service';\n\n/**\n * Класс SvgIconComponent представляет компонент иконки SVG.\n * Данный компонент позволяет отображать иконки SVG с настраиваемыми свойствами, такими как цвет и вращение.\n * Он использует SvgIconService для получения иконок SVG и применения их к элементу-хосту компонента.\n */\n@Component({\n  // eslint-disable-next-line @angular-eslint/component-selector\n  selector: 'svg-icon',\n  template: '',\n  styleUrls: ['./svg-icon.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SvgIconComponent implements OnChanges {\n  /**\n   * Представляет тип иконки.\n   *\n   * @typedef {string} IconType\n   *\n   * @description\n   * Тип `IconType` - это строка, описывающая категорию или стиль иконки. Она используется\n   * для идентификации различных типов иконок и применения соответствующего стиля или поведения.\n   *\n   * @example\n   * ```\n   * // Валидные значения типа иконки\n   * const type1 = 'outline';\n   * const type2 = 'solid';\n   * const type3 = 'filled';\n   * ```\n   */\n  @Input({ required: true }) name?: IconType;\n  /**\n   * Переменная color представляет цвет объекта или элемента.\n   *\n   * @type {string}\n   */\n  @Input() color = '';\n  /**\n   * Количество вращения в градусах.\n   *\n   * @type {number}\n   */\n  @Input() rotateDeg = 0;\n  /**\n   * Представляет коллекцию названий CSS-классов.\n   * @class\n   */\n  @HostBinding('class') classes = 'svg-icon';\n  /**\n   * Представляет последнее значение ключа.\n   *\n   * @type {string}\n   */\n  private lastKey = '';\n  /**\n   * Представляет сырой нативный элемент текущего компонента.\n   *\n   * @type {ElementRef}\n   * @readonly\n   */\n  private readonly element = this.host.nativeElement;\n  /**\n   * Создает новый экземпляр конструктора.\n   *\n   * @param {ElementRef} host - Объект ElementRef, представляющий хост-элемент.\n   * @param {SvgIconService} registry - Объект SvgIconService используется для регистрации иконок SVG.\n   * @param {DomSanitizer} sanitizer - Объект DomSanitizer используется для санитарной обработки HTML-контента.\n   * @param {Renderer2} renderer - Объект Renderer2 используется для манипуляции с DOM-элементами.\n   */\n  constructor(\n    private host: ElementRef,\n    private registry: SvgIconService,\n    private sanitizer: DomSanitizer,\n    private renderer: Renderer2,\n  ) {}\n\n  /**\n   * Выполнить необходимые действия, когда входные свойства изменились.\n   *\n   * @param {SimpleChangesTyped<this>} changes - Массив изменений.\n   *\n   * @return {void}\n   */\n  ngOnChanges(changes: SimpleChangesTyped<this>): void {\n    if (changes?.name && this.name) {\n      this.setIcon(this.name);\n    }\n    changes?.color && this.setInputColor(changes?.color.currentValue);\n  }\n\n  /**\n   * Устанавливает входной цвет для элемента.\n   *\n   * @param {string} color - Цвет, который нужно установить для элемента.\n   * @return {void}\n   */\n  private setInputColor(color?: string): void {\n    color && (this.element.style.fill = this.color);\n  }\n\n  /**\n   * Устанавливает иконку для компонента.\n   *\n   * @param {IconType} name - Название иконки.\n   * @returns {void}\n   */\n  private setIcon(name: IconType): void {\n    const icon = this.registry.getIcon(name);\n    if (!icon) {\n      console.error('Иконка не найдена ' + name);\n      return;\n    }\n    this.renderer.removeClass(this.element, SvgIconComponent.getIconClassName(this.lastKey));\n    this.lastKey = name;\n    this.renderer.addClass(this.element, SvgIconComponent.getIconClassName(name));\n    if (this.rotateDeg) {\n      this.renderer.setStyle(this.element, 'transform', `rotate(${this.rotateDeg}deg)`);\n    }\n    this.name && this.renderer.setAttribute(this.element, 'data-svg-icon', this.name);\n    const sanitizedHtml = this.sanitizer.sanitize(SecurityContext.HTML, this.sanitizer.bypassSecurityTrustHtml(icon));\n    this.renderer.setProperty(this.element, 'innerHTML', sanitizedHtml);\n  }\n\n  /**\n   * Возвращает имя класса для SVG иконки на основе указанного имени.\n   *\n   * @param {string} name - Имя SVG иконки.\n   *\n   * @return {string} Имя класса для SVG иконки.\n   */\n  private static getIconClassName(name: string): string {\n    return `svg-icon-${name}`;\n  }\n}\n","export interface SvgIconType {\n  name: string;\n  data: string;\n}\n\nexport class SvgIcon {\n  isInitialized = false;\n\n  constructor(public content: string) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { SvgIconComponent } from './svg-icon.component';\nimport { SvgIconService } from './svg-icon.service';\n\n/**\n * Представляет модуль для импорта и экспорта SVG-иконок.\n *\n * @module SvgIconModule\n * @use CommonModule\n * @declaration SvgIconComponent\n * @export SvgIconComponent\n * @provider SvgIconService\n */\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SvgIconComponent],\n  exports: [SvgIconComponent],\n  providers: [SvgIconService],\n})\nexport class SvgIconModule {}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nimport icons, { IconType } from './generated-svg/svg-icons';\nimport { SvgIcon, SvgIconType } from './svg-icon.interface';\nimport { SVG_REGISTRY_TOKEN } from './svg-icon.token';\n\n/**\n * Преобразует массив с именем и данными в объект.\n * @param {Array} name - Строка с именем.\n * @param {Array} data - Строка с данными.\n * @returns {Object} - Объект с собственностями имени и данных.\n */\nconst objConverting = ([name, data]: [string, string]): { name: string; data: string } => ({ name, data });\n\n/**\n * Преобразует объект иконок в массив объектов иконок.\n *\n * @param {Object} obj - Объект, содержащий иконки.\n * @returns {Array} Массив объектов иконок, где каждый объект имеет свойства имени и данных.\n */\nconst iconsToArray = (obj: { [key: string]: string }): { name: string; data: string }[] => Object.entries(obj).map(objConverting);\n\n/**\n * Служба для управления иконками SVG.\n */\n@Injectable({ providedIn: 'root' })\nexport class SvgIconService {\n  /**\n   * Класс представляющий карту SVG.\n   * @class\n   */\n  private readonly svgMap = new Map<string, SvgIcon>();\n  /**\n   * Конструктор для класса.\n   *\n   * @constructor\n   * @param {Document} document - Документ для манипулирования DOM.\n   * @param {Record<string, string>} iconsRegistry - Реестр, содержащий иконки SVG.\n   * @param {DomSanitizer} sanitizer - Объект-санитайзер для очистки HTML контента.\n   * @returns {void}\n   */\n  constructor(\n    @Inject(DOCUMENT) private document: Document,\n    @Inject(SVG_REGISTRY_TOKEN) private iconsRegistry: Record<string, string>,\n    private sanitizer: DomSanitizer,\n  ) {\n    const inMemoryIcons = this.iconsRegistry ?? icons;\n    if (inMemoryIcons) {\n      this.register(iconsToArray(inMemoryIcons));\n    }\n  }\n\n  /**\n   * Извлекает содержимое SVG для заданного ключа иконки.\n   *\n   * @param {IconType} key - Ключ, представляющий иконку для извлечения.\n   * @return {string | undefined} - Содержимое SVG иконки или undefined, если иконка не найдена.\n   */\n  getIcon(key: IconType): string | undefined {\n    const icon = key && this.svgMap.get(key);\n    if (!icon) {\n      return undefined;\n    }\n    if (!icon.isInitialized) {\n      const svg = this.toElement(icon.content);\n      icon.content = svg.outerHTML;\n      icon.isInitialized = true;\n    }\n    return icon.content;\n  }\n\n  /**\n   * Регистрирует одну или несколько иконок SvgIcon.\n   *\n   * @param {SvgIconType|SvgIconType[]} icons - Иконка SvgIcon для регистрации.\n   * @returns {void}\n   */\n  register(icons: SvgIconType | SvgIconType[]): void {\n    for (const { name, data } of Array.isArray(icons) ? icons : [icons]) {\n      if (!this.svgMap.has(name)) {\n        this.svgMap.set(name, new SvgIcon(data));\n      }\n    }\n  }\n\n  /**\n   * Преобразует заданную строку содержимого в SVGElement.\n   *\n   * @param {string} content - Строка содержимого для преобразования в SVGElement.\n   * @returns {SVGElement} - Преобразованный SVGElement.\n   */\n  private toElement(content: string): SVGElement {\n    const div = this.document.createElement('div');\n    div.innerHTML = this.sanitizer.sanitize(SecurityContext.HTML, this.sanitizer.bypassSecurityTrustHtml(content)) ?? '';\n    return div.querySelector('svg') as SVGElement;\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const SVG_REGISTRY_TOKEN = new InjectionToken<Record<string, string>>('Icons registry token');\n","export enum Pairs {\n  USD = 'USD',\n  EUR = 'EUR',\n  GBP = 'GBP',\n  RUB = 'RUB',\n}\n\nexport interface ResponsePairsRates {\n  rates: Record<Pairs, number>;\n  date: number;\n  base: 'USD';\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of, tap } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '../../environments/environment';\nimport { Pairs, ResponsePairsRates } from './currencies.interface';\n\n@Injectable({ providedIn: 'root' })\nexport class CurrenciesService {\n  isLoaded$ = new BehaviorSubject(true);\n\n  #currencyPairsRates: ResponsePairsRates | null = null;\n\n  constructor(private http: HttpClient) {}\n\n  loadCurrencyPairsRates(pairs: Pairs[]): Observable<ResponsePairsRates> {\n    this.isLoaded$.next(true);\n    const data = this.getFromStorage();\n\n    if (data) {\n      const diffInSec = (Date.now() - data.date) / 1000;\n\n      return (diffInSec > 3600 ? this.loadCurrencyPairsRatesFromAPI(pairs) : of(data)).pipe(tap(() => this.isLoaded$.next(false)));\n    } else {\n      return this.loadCurrencyPairsRatesFromAPI(pairs).pipe(tap(() => this.isLoaded$.next(false)));\n    }\n  }\n\n  setCurrencyPairsRates(data: ResponsePairsRates): void {\n    this.#currencyPairsRates = data;\n  }\n\n  getAmount(amount: string, from: Pairs, to: Pairs): string {\n    if (!this.#currencyPairsRates?.rates[from] || !this.#currencyPairsRates?.rates[to] || amount === '') {\n      return '';\n    }\n\n    if (from !== Pairs.USD) {\n      const inDollars = +amount / this.#currencyPairsRates.rates[from];\n      return `${inDollars * this.#currencyPairsRates.rates[to] || ''}`;\n    } else {\n      return `${+amount * this.#currencyPairsRates.rates[to] || ''}`;\n    }\n  }\n\n  private loadCurrencyPairsRatesFromAPI(pairs: Pairs[]): Observable<ResponsePairsRates> {\n    return this.http.get<ResponsePairsRates>('latest', { params: { apikey: environment.CURRENCY_FREAKS_API_KEY } }).pipe(\n      map((data) => {\n        const rates = pairs.reduce((acc, pair) => ({ ...acc, [pair]: data.rates[pair] }), {} as Record<Pairs, number>);\n        const currencyPairsRates = { ...data, rates, date: Date.now() };\n        this.saveCurrencyPairsRatesToStorage(currencyPairsRates);\n        return currencyPairsRates;\n      }),\n    );\n  }\n\n  private saveCurrencyPairsRatesToStorage(currencyPairsRates: ResponsePairsRates): void {\n    localStorage.setItem('currencyPairsRates', JSON.stringify(currencyPairsRates));\n  }\n\n  private getFromStorage(): ResponsePairsRates | null {\n    const currencyPairsRates = localStorage.getItem('currencyPairsRates');\n\n    if (currencyPairsRates) {\n      return JSON.parse(currencyPairsRates);\n    } else {\n      return null;\n    }\n  }\n}\n","export const environment = {\n  production: false,\n  environment: 'development',\n  API_URL: 'https://api.currencyfreaks.com/',\n  CURRENCY_FREAKS_API_KEY: 'b51102e92b9c4d10a5f3761598b2c9ba',\n};\n","import '@angular/localize/init';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n","/* (ignored) */"],"names":["DestroyRef","inject","takeUntilDestroyed","NonNullableFormBuilder","Validators","combineLatest","filter","take","Pairs","CurrenciesService","i0","ɵɵelementStart","ɵɵi18n","ɵɵelementEnd","ɵɵtext","ɵɵproperty","currency_r1","code","ɵɵadvance","ɵɵtextInterpolate","name","currency_r2","MyErrorStateMatcher","isErrorState","control","form","isSubmitted","submitted","invalid","dirty","touched","AppComponent","destroyRef","constructor","formBuilder","currenciesService","isLoaded$","matcher","currencies","RUB","USD","EUR","GBP","group","amountFrom","required","currencyFrom","amountTo","currencyTo","ngOnInit","loadCurrencyPairsRates","ngAfterViewInit","formListener","get","valueChanges","pipe","isLoaded","subscribe","getAmount","value","setValue","emitEvent","map","currency","data","setCurrencyPairsRates","_","ɵɵdirectiveInject","i1","i2","_2","selectors","decls","vars","consts","i18n_0","ngI18nClosureMode","$localize","ɵɵelementContainerStart","ɵɵelement","ɵɵtemplate","AppComponent_Conditional_10_Template","ɵɵrepeaterCreate","AppComponent_For_16_Template","_forTrack0","AppComponent_Conditional_17_Template","AppComponent_For_32_Template","AppComponent_Conditional_33_Template","tmp_0_0","ɵɵpipeBind1","ctx","undefined","ɵɵconditional","tmp_3_0","hasError","ɵɵrepeater","tmp_6_0","tmp_10_0","ClipboardModule","CommonModule","HTTP_INTERCEPTORS","HttpClientModule","FormsModule","ReactiveFormsModule","MatButtonModule","MatFormFieldModule","MatIcon","MatInputModule","MatFormField","MatOption","MatSelect","BrowserModule","BrowserAnimationsModule","RouterOutlet","LetDirective","PushPipe","StoreDevtoolsModule","NgxMaskDirective","provideNgxMask","DropdownModule","environment","LoadingComponent","BaseUrlInterceptor","default","icons","SvgIconModule","SVG_REGISTRY_TOKEN","AppModule","bootstrap","_3","provide","useValue","useClass","multi","imports","production","instrument","maxAge","connectInZone","declarations","ctx_r0","link","ɵɵsanitizeUrl","ɵɵprojection","type","isVisible","isAnimation","getLink","ngOnChanges","changes","currentValue","Date","getTime","ɵɵinjectAttribute","hostVars","hostBindings","LoadingComponent_HostBindings","rf","ɵɵclassProp","LoadingComponent_Conditional_0_Template","LoadingComponent_Conditional_1_Template","HttpEvent","HttpHandler","HttpRequest","intercept","req","next","clone","url","API_URL","handle","factory","ɵfac","providedIn","swap","ElementRef","Renderer2","SecurityContext","DomSanitizer","SvgIconService","SvgIconComponent","host","registry","sanitizer","renderer","color","rotateDeg","classes","lastKey","element","nativeElement","setIcon","setInputColor","style","fill","icon","getIcon","console","error","removeClass","getIconClassName","addClass","setStyle","setAttribute","sanitizedHtml","sanitize","HTML","bypassSecurityTrustHtml","setProperty","SvgIconComponent_HostBindings","ɵɵclassMap","SvgIcon","content","isInitialized","exports","DOCUMENT","objConverting","iconsToArray","obj","Object","entries","document","iconsRegistry","svgMap","Map","inMemoryIcons","register","key","svg","toElement","outerHTML","Array","isArray","has","set","div","createElement","innerHTML","querySelector","ɵɵinject","InjectionToken","HttpClient","BehaviorSubject","of","tap","currencyPairsRates","http","pairs","getFromStorage","diffInSec","now","date","loadCurrencyPairsRatesFromAPI","amount","from","to","rates","inDollars","params","apikey","CURRENCY_FREAKS_API_KEY","reduce","acc","pair","saveCurrencyPairsRatesToStorage","localStorage","setItem","JSON","stringify","getItem","parse","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","catch","err"],"sourceRoot":"webpack:///"}